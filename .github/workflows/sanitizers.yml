name: Sanitizers (ASan + UBSan)

on:
  pull_request:
    branches: [ Dev, dev, main ]
  workflow_dispatch: {}   # allow manual runs from Actions tab

jobs:
  asan-ubsan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # ---------- SPEED: cache APT downloads & package lists ----------
      - name: Cache APT archives
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: apt-archives-${{ runner.os }}-${{ hashFiles('**/makefile', '**/Makefile') }}
          restore-keys: |
            apt-archives-${{ runner.os }}-

      - name: Cache APT lists
        uses: actions/cache@v4
        with:
          path: /var/lib/apt/lists
          key: apt-lists-${{ runner.os }}
          restore-keys: |
            apt-lists-${{ runner.os }}-

      # ---------- Install toolchain + X11 / OpenGL / audio deps ----------
      # These provide X11/Xlib.h etc. for GLFW/raylib builds on Linux
      - name: Install compiler & system deps
        run: |
          sudo apt-get update -o Acquire::Retries=3
          sudo apt-get install -y --no-install-recommends \
            clang make cmake pkg-config \
            build-essential \
            libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev \
            libgl1-mesa-dev mesa-common-dev \
            libasound2-dev libpulse-dev \
            libudev-dev libdrm-dev libgbm-dev \
            xorg-dev

      # ---------- SPEED: ccache for rebuilds ----------
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ hashFiles('**/*.cpp', '**/*.c', '**/*.h', '**/*.hpp', '**/makefile', '**/Makefile') }}
          restore-keys: |
            ccache-${{ runner.os }}-

      # ---------- Build with sanitizers ----------
      - name: Build (Makefile) with ASan/UBSan
        env:
          CC: clang
          CXX: clang++
          
          CXXFLAGS: >-
            -O1 -g -fno-omit-frame-pointer
            -fsanitize=address,undefined
            -fno-sanitize-recover=all
          LDFLAGS: -fsanitize=address,undefined
          
          CCACHE_DIR: ~/.ccache
        run: |
          # Prefer a clean build the first time cache is warm
          make clean || true
          # If your build needs platform hints for raylib/GLFW, keep them here:
          make -j"$(nproc)" PLATFORM=PLATFORM_DESKTOP GRAPHICS=GRAPHICS_API_OPENGL_33 build-all

      - name: Run tests (sanitized)
        env:
          ASAN_OPTIONS: detect_leaks=1:halt_on_error=1:strict_string_checks=1:check_initialization_order=1
          UBSAN_OPTIONS: halt_on_error=1:print_stacktrace=1
        run: |
          make -j"$(nproc)" test
